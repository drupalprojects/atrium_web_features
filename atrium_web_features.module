<?php

include_once('atrium_web_features.features.inc');

/**
 * Implements hook_menu().
 */
function atrium_web_features_menu_alter(&$items) {
  
  // Lookup web feature nodes
  $results = db_query('SELECT nid FROM {node} WHERE type = "web_feature"');
  while ($node = db_fetch_object($results)){
    $node = node_load($node->nid);
    
    // Add links to features menu for each feature
    $items["node/$node->nid"] = $items['node/%node'];
    $items["node/$node->nid"]["menu_name"] = 'features';
    $items["node/$node->nid"]["page callback"] = 'atrium_web_features_node_view';
    $items["node/$node->nid"]["access callback"] = 'atrium_web_features_spaces_menu_access';
    $items["node/$node->nid"]["type"] = MENU_NORMAL_ITEM;
    $items["node/$node->nid"]["title"] = $node->title;
    $items["node/$node->nid"]["title callback"] = NULL;


    // @TODO: Add access check so web_feature nodes stay within their groups.

  }
  // Add web features config page
  $items['node/%node/features/web'] = array(
    'title' => 'Web Features', 
    'description' => 'Configure web features for this space.', 
    'page callback' => 'atrium_web_features_page', 
    'access callback' => 'spaces_access_admin', 
    'access arguments' => array(), 
    'type' => MENU_LOCAL_TASK, 
  );

  // @TODO: Add an page under "Customize Features" for listing, adding and editing "web features"
}

/**
 * Replacement callback for node_page_view()
 */
function atrium_web_features_node_view($nid, $cid = NULL){
  $node = node_load($nid);
  
  drupal_add_css(drupal_get_path('module', 'atrium_web_features') . '/style.css');
  drupal_add_js(drupal_get_path('module', 'atrium_web_features') . '/scripts.js');
  return node_page_view($node, $cid);
}

/**
 * Access callback for the special menu items.
 */
function atrium_web_features_spaces_menu_access($op, $nid = NULL, $callback = 'node_access'){
  $node = node_load($nid);
 
  global $_atrium_web_features;
  $_atrium_web_features[] = $node;
  return spaces_menu_access($op, $node, $callback);
}

function atrium_web_features_preprocess_page(&$vars){
  
  global $_atrium_web_features;
  
  $css = "<style>";
  foreach ($_atrium_web_features as $node){
    // Lets load CSS here, since we need it for every menu item
    if (isset($node->field_web_feature_icon[0]['filepath'])){
      $nid = $node->nid;
      $path = drupal_html_class(drupal_get_path_alias("node/$nid"));
      $image_path = url($node->field_web_feature_icon[0]['filepath'], array('purl' => 'disabled'));
      $css .= "
#features-menu li a.icon-$path span.icon {
  background-image: url($image_path);
}
";  
    }
  }
  
  $css .= "</style>";
  
  $vars['styles'] .= $css;
}

/**
 * Page Callback for /features/web
 */
function atrium_web_features_page(){
  // Get current space
  $space = spaces_get_space();
  $group = $space->group; 

  // Lookup web feature nodes (for this space)
  $rows = array();
  $header = array(t('Feature'), t('URL'), t('Actions'));
  $results = db_query('SELECT n.nid FROM {node} n LEFT JOIN {og_ancestry} og ON n.nid = og.nid WHERE type = "web_feature" AND group_nid = %d', $group->nid);
  while ($node = db_fetch_object($results)){
    $node = node_load($node->nid);
    $url = $node->field_web_feature_url[0]['url'];
    $row = array();
    $row[] = l($node->title, "node/$node->nid");
    $row[] = l($url, $url);
    $row[] = l(t('Edit'), "node/$node->nid/edit", array('query' => array('destination' => $_GET['q']))) .' | '. l(t('Delete'), "node/$node->nid/delete", array('query' => array('destination' => $_GET['q'])));
    $rows[] = $row;
  }
 
  $output = '<p>' . t('Manage your Web Features here.') . '</p>';
  $output .= '<p>' . l(t('Add new Web Feature'), "node/add/web-feature", array('query' => array('destination' => $_GET['q']))) . '</p>'; 
  $output .= theme('table', $header, $rows);
  return $output;
}

/** 
 * Implements hook_nodeapi()
 */
function atrium_web_features_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
    case 'update':
      if ($node->type == 'web_feature') {
        menu_cache_clear();
      }
    break;
  }
}

/**
 *
 */
function drupal_html_class($class) {
  return drupal_clean_css_identifier(drupal_strtolower($class));
}

/**
 * Prepares a string for use as a CSS identifier (element, class, or ID name).
 * Backport from D7
 */
function drupal_clean_css_identifier($identifier, $filter = array(' ' => '-', '_' => '-', '/' => '-', '[' => '-', ']' => '')) {
  // By default, we filter using Drupal's coding standards.
  $identifier = strtr($identifier, $filter);

  // Valid characters in a CSS identifier are:
  // - the hyphen (U+002D)
  // - a-z (U+0030 - U+0039)
  // - A-Z (U+0041 - U+005A)
  // - the underscore (U+005F)
  // - 0-9 (U+0061 - U+007A)
  // - ISO 10646 characters U+00A1 and higher
  // We strip out any character not in the above list.
  $identifier = preg_replace('/[^\x{002D}\x{0030}-\x{0039}\x{0041}-\x{005A}\x{005F}\x{0061}-\x{007A}\x{00A1}-\x{FFFF}]/u', '', $identifier);

  return $identifier;
}